)
saveRDS(out, file=file.path(vizdata.dir, 'viz_data.RDS'))
#also save a csv of the lite data for edmund
out <- list(
'data'=dt,
'tracts'=tract_sf
)
saveRDS(out, file=file.path(out.dir, 'lite_data.RDS'))
write.csv(dt, file=file.path(out.dir, 'lite_data.csv'))
#***********************************************************************************************************************
# ---MAP----------------------------------------------------------------------------------------------------------------
#create a manual diverging color scale to make sure that the index shifts are uniformly depicted
div_colors <- RColorBrewer::brewer.pal(11, 'RdBu') %>% rev
names(div_colors) <- unique(measure_ranks$measure_shift_capped) %>% sort
#create a manual discrete color scale for the continuous index and make sure the color scale legend has all integers
#cont_colors <- viridis::magma(n = 10)
#update colors with allies scale
cont_colors <- c(
rgb(248, 250, 251, maxColorValue = 255), # 1:     Red: 248, Green: 250, Blue: 251
rgb(236, 242, 246, maxColorValue = 255), # 2:     Red: 236, Green: 242, Blue: 246
rgb(220, 230, 239, maxColorValue = 255), # 3:     Red: 220, Green: 230, Blue: 239
rgb(203, 218, 233, maxColorValue = 255), # 4:     Red: 203, Green: 218, Blue: 233
rgb(194, 199, 223, maxColorValue = 255), # 5:     Red: 194, Green: 199, Blue: 223
rgb(194, 178, 213, maxColorValue = 255), # 6:     Red: 194, Green: 178, Blue: 213
rgb(192, 157, 203, maxColorValue = 255), # 7:     Red: 192, Green: 157, Blue: 203
rgb(189, 132, 186, maxColorValue = 255), # 8:     Red: 189, Green: 132, Blue: 186
rgb(161, 124, 177, maxColorValue = 255), # 9:     Red: 161, Green: 124, Blue: 177
rgb(163, 124, 162, maxColorValue = 255) # 10:   Red: 163, Green: 124, Blue: 162
)
names(cont_colors) <- 1:10
head(dt)
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
#create a series of colored maps for the different vars in the dataset
#denote tracts that dropped in or out of high impact
cartographeR(dt=dt, map_varname = 'dropout', map_label = 'Dropout Direction',
map_title = 'Tracts Newly Dropped/Added From High Impact',
scale_type='drops')
#show overall change in the index ranking
cartographeR(dt=dt, map_varname = 'rank_shift', map_label = 'Index Change',
map_title = 'Shift in Overall Rank from V1.1 to V2.0',
scale_type='div_man', scale_vals = div_colors)
#show change in the in the theme specific ranking
cartographeR(dt=dt, map_varname = 'rank_shift', map_label = 'Rank Change',
lvl=2, #theme level
map_title = 'Shift in Overall Rank from V1.1 to V2.0',
facet_var='theme', scale_type='div_man', scale_vals = div_colors)
viz.dir
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
tract_sf <- file.path(data.dir, 'shapefile', 'tl_2010_53_tract10.shp') %>%
st_read
#create a series of colored maps for the different vars in the dataset
#denote tracts that dropped in or out of high impact
cartographeR(dt=dt, map_varname = 'dropout', map_label = 'Dropout Direction',
map_title = 'Tracts Newly Dropped/Added From High Impact',
scale_type='drops')
#show overall change in the index ranking
cartographeR(dt=dt, map_varname = 'rank_shift', map_label = 'Index Change',
map_title = 'Shift in Overall Rank from V1.1 to V2.0',
scale_type='div_man', scale_vals = div_colors)
#show change in the in the theme specific ranking
cartographeR(dt=dt, map_varname = 'rank_shift', map_label = 'Rank Change',
lvl=2, #theme level
map_title = 'Shift in Overall Rank from V1.1 to V2.0',
facet_var='theme', scale_type='div_man', scale_vals = div_colors)
tract_sf %>% str
tract_sf %>% mutate_(GEOID=GEOID10)
tract_sf %>% mutate_(GEOID='GEOID10')
tract_sf <- tract_sf %>% mutate_(GEOID='GEOID10')
#create a series of colored maps for the different vars in the dataset
#denote tracts that dropped in or out of high impact
cartographeR(dt=dt, map_varname = 'dropout', map_label = 'Dropout Direction',
map_title = 'Tracts Newly Dropped/Added From High Impact',
scale_type='drops')
#show overall change in the index ranking
cartographeR(dt=dt, map_varname = 'rank_shift', map_label = 'Index Change',
map_title = 'Shift in Overall Rank from V1.1 to V2.0',
scale_type='div_man', scale_vals = div_colors)
#show change in the in the theme specific ranking
cartographeR(dt=dt, map_varname = 'rank_shift', map_label = 'Rank Change',
lvl=2, #theme level
map_title = 'Shift in Overall Rank from V1.1 to V2.0',
facet_var='theme', scale_type='div_man', scale_vals = div_colors)
cartographeR(dt=dt, map_varname = 'rank_shift', map_label = 'Rank Change',
lvl=2, #theme level
map_title = 'Shift in Overall Rank from V1.1 to V2.0',
facet_var='theme', scale_type='div_man', scale_vals = div_colors)
#show the current version of the overall index
cartographeR(dt=dt, map_varname = 'rank', map_label = 'Rank',
map_title = 'Overall Rank (V2)', scale_type='div_man', scale_vals = cont_colors)
#show the old version of the overall index
cartographeR(dt=dt, map_varname = 'rank_v1', map_label = 'Rank',
map_title = 'Overall Rank (V1.1)', scale_type='cont')
#show which tracts are highly impacted (current version)
cartographeR(dt=dt, map_varname = 'impacted', map_label = 'Impacted',
map_title = 'Highly Impacted Tracts (V2)', scale_type='bin')
#show which tracts are highly impacted (old version)
cartographeR(dt=dt, map_varname = 'impacted_v1', map_label = 'Impacted',
map_title = 'Highly Impacted Tracts (V1.1)', scale_type='bin')
head(dt)
#loop through the measures themselves (both rank and raw)
#rank
lapply(unique(dt$item),
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont', scale_vals = cont_colors)
#show the current version of the overall index
cartographeR(dt=dt, map_varname = 'rank', map_label = 'Rank',
map_title = 'Overall Rank (V2.0)', scale_type='div_man', scale_vals = cont_colors)
cont_colors
#create a manual discrete color scale for the continuous index and make sure the color scale legend has all integers
#cont_colors <- viridis::magma(n = 10)
#update colors with allies scale
cont_colors <- c(
rgb(248, 250, 251, maxColorValue = 255), # 1:     Red: 248, Green: 250, Blue: 251
rgb(236, 242, 246, maxColorValue = 255), # 2:     Red: 236, Green: 242, Blue: 246
rgb(220, 230, 239, maxColorValue = 255), # 3:     Red: 220, Green: 230, Blue: 239
rgb(203, 218, 233, maxColorValue = 255), # 4:     Red: 203, Green: 218, Blue: 233
rgb(194, 199, 223, maxColorValue = 255), # 5:     Red: 194, Green: 199, Blue: 223
rgb(194, 178, 213, maxColorValue = 255), # 6:     Red: 194, Green: 178, Blue: 213
rgb(192, 157, 203, maxColorValue = 255), # 7:     Red: 192, Green: 157, Blue: 203
rgb(189, 132, 186, maxColorValue = 255), # 8:     Red: 189, Green: 132, Blue: 186
rgb(161, 124, 177, maxColorValue = 255), # 9:     Red: 161, Green: 124, Blue: 177
rgb(163, 124, 162, maxColorValue = 255) # 10:   Red: 163, Green: 124, Blue: 162
)
cont_colors
#loop through the measures themselves (both rank and raw)
#rank
lapply(unique(dt$item),
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont', scale_vals = cont_colors)
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
#loop through the measures themselves (both rank and raw)
#rank
lapply(unique(dt$item),
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont_man', scale_vals = cont_colors)
dt[item==%like%'Ozone']
dt[item%like%'Ozone']
dt[item%like%'Ozone', table(rank)]
#create a manual discrete color scale for the continuous index and make sure the color scale legend has all integers
#cont_colors <- viridis::magma(n = 10)
#update colors with allies scale
cont_colors <- c(
'grey75', #-1: No-missing NAs, color them as missing
rgb(248, 250, 251, maxColorValue = 255), # 1:     Red: 248, Green: 250, Blue: 251
rgb(236, 242, 246, maxColorValue = 255), # 2:     Red: 236, Green: 242, Blue: 246
rgb(220, 230, 239, maxColorValue = 255), # 3:     Red: 220, Green: 230, Blue: 239
rgb(203, 218, 233, maxColorValue = 255), # 4:     Red: 203, Green: 218, Blue: 233
rgb(194, 199, 223, maxColorValue = 255), # 5:     Red: 194, Green: 199, Blue: 223
rgb(194, 178, 213, maxColorValue = 255), # 6:     Red: 194, Green: 178, Blue: 213
rgb(192, 157, 203, maxColorValue = 255), # 7:     Red: 192, Green: 157, Blue: 203
rgb(189, 132, 186, maxColorValue = 255), # 8:     Red: 189, Green: 132, Blue: 186
rgb(161, 124, 177, maxColorValue = 255), # 9:     Red: 161, Green: 124, Blue: 177
rgb(163, 124, 162, maxColorValue = 255) # 10:   Red: 163, Green: 124, Blue: 162
)
#loop through changes in the measures binned by theme
lapply(unique(measure_ranks$theme),
cartographeR,
shapefile=tract_sf,
dt=dt[!(item%like%'Trans')], map_varname = 'rank_shift', map_label= 'Rank Change',
lvl=3, #most granular level
map_title = 'Shift in Measure Ranking from V1.1 to V2.0',
subset_var='theme',
facet_var='item', scale_type='div_man', scale_vals = div_colors)
#loop through changes in the measures binned by theme
lapply(unique(measure_ranks$theme),
cartographeR,
shapefile=tract_sf,
dt=dt[!(item%like%'Trans')], map_varname = 'rank_shift', map_label= 'Rank Change',
lvl=3, #most granular level
map_title = 'Shift in Measure Ranking from V1.1 to V2.0',
subset_var='theme',
facet_var='item', scale_type='div_man', scale_vals = div_colors)
#show overall change in the index ranking
cartographeR(dt=dt, map_varname = 'rank_shift', map_label = 'Rank Change',
map_title = 'Shift in Overall Rank from V1.1 to V2.0',
scale_type='div_man', scale_vals = div_colors)
#loop through the measures themselves (both rank and raw)
#rank
lapply(unique(dt$item),
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont_man', scale_vals = cont_colors)
-1:10
names(cont_colors) <- c(-1, 1:10)
#loop through the measures themselves (both rank and raw)
#rank
lapply(unique(dt$item),
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont_man', scale_vals = cont_colors)
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
#loop through changes in the measures binned by theme
lapply(unique(measure_ranks$theme),
cartographeR,
shapefile=tract_sf,
dt=dt[!(item%like%'Trans')], map_varname = 'rank_shift', map_label= 'Rank Change',
lvl=3, #most granular level
map_title = 'Shift in Measure Ranking from V1.1 to V2.0',
subset_var='theme',
facet_var='item', scale_type='div_man', scale_vals = div_colors)
#loop through the measures themselves (both rank and raw)
#rank
lapply(unique(dt$item),
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont_man', scale_vals = cont_colors)
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
#loop through the measures themselves (both rank and raw)
#rank
lapply(unique(dt$item),
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont_man', scale_vals = cont_colors)
scale_vals
cont_colors
#create a manual discrete color scale for the continuous index and make sure the color scale legend has all integers
#cont_colors <- viridis::magma(n = 10)
#update colors with allies scale
cont_colors <- c(
rgb(248, 250, 251, maxColorValue = 255), # 1:     Red: 248, Green: 250, Blue: 251
rgb(236, 242, 246, maxColorValue = 255), # 2:     Red: 236, Green: 242, Blue: 246
rgb(220, 230, 239, maxColorValue = 255), # 3:     Red: 220, Green: 230, Blue: 239
rgb(203, 218, 233, maxColorValue = 255), # 4:     Red: 203, Green: 218, Blue: 233
rgb(194, 199, 223, maxColorValue = 255), # 5:     Red: 194, Green: 199, Blue: 223
rgb(194, 178, 213, maxColorValue = 255), # 6:     Red: 194, Green: 178, Blue: 213
rgb(192, 157, 203, maxColorValue = 255), # 7:     Red: 192, Green: 157, Blue: 203
rgb(189, 132, 186, maxColorValue = 255), # 8:     Red: 189, Green: 132, Blue: 186
rgb(161, 124, 177, maxColorValue = 255), # 9:     Red: 161, Green: 124, Blue: 177
rgb(163, 124, 162, maxColorValue = 255) # 10:   Red: 163, Green: 124, Blue: 162
)
names(cont_colors) <- 1:10
cont_colors
#loop through the measures themselves (both rank and raw)
#rank
lapply(unique(dt$item),
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont_man', scale_vals = cont_colors)
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
#loop through the measures themselves (both rank and raw)
#rank
lapply('Death From Cardiovascular Disease',
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont_man', scale_vals = cont_colors)
head(dt)
#filter long dataset to appropriate level
dt <- dt[level==lvl]
head(dt)
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
#loop through the measures themselves (both rank and raw)
#rank
lapply('Death From Cardiovascular Disease',
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont_man', scale_vals = cont_colors)
head(dt)
table(dt$level)
subset_var
dt <- dt[get(subset_var)==subset_val]
#also cleanup the name for file
subset_name <- str_replace_all(subset_val, ' ', "000") %>%
tolower %>%
str_replace_all("[^[:alnum:]]", "") %>%
str_replace_all('000', "_")
message(subset_name)
head(dt)
#loop through the measures themselves (both rank and raw)
#rank
lapply('Death from Cardiovascular Disease',
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont_man', scale_vals = cont_colors)
dt <- dt[get(subset_var)==subset_val]
#also cleanup the name for file
subset_name <- str_replace_all(subset_val, ' ', "000") %>%
tolower %>%
str_replace_all("[^[:alnum:]]", "") %>%
str_replace_all('000', "_")
message(subset_name)
head(dt)
dt[, map_var := get(map_varname)]
table(dt$map_var)
dt[map_var>0]
dt[, map_var := get(map_varname)]
dt <- dt[map_var>0] #remove the -1s which represent nonmissing NAs (plot as NA)
dt <- dt[!(GEOID %in% filter_geocodes)]
#merge dropouts to shapefile and plot
shp <- shapefile %>%
merge(dt, by='GEOID', allow.cartesian=T)
plot <- ggplot() +
geom_sf(data = shp, aes(fill = map_var), lwd=0) +
geom_sf(data = water_sf, lwd=0, color = 'gray70', fill = 'gray95') +
#TODO seems to make the map tilted even though this is the NAD83 proj?
#coord_sf(crs=4269) +
theme_void()
plot
print(plot)
plot <- plot + facet_wrap(reformulate(facet_var))
scale_type
scale_vals
scale_type
plot <- plot + scale_fill_manual(map_label, values=scale_vals, na.value = "grey75")
print(plot)
str(dt)
scale_vals
class(scale_vals)
names(scale_vals)
names(scale_vals) %>% class
cont_colors <- c(
rgb(248, 250, 251, maxColorValue = 255), # 1:     Red: 248, Green: 250, Blue: 251
rgb(236, 242, 246, maxColorValue = 255), # 2:     Red: 236, Green: 242, Blue: 246
rgb(220, 230, 239, maxColorValue = 255), # 3:     Red: 220, Green: 230, Blue: 239
rgb(203, 218, 233, maxColorValue = 255), # 4:     Red: 203, Green: 218, Blue: 233
rgb(194, 199, 223, maxColorValue = 255), # 5:     Red: 194, Green: 199, Blue: 223
rgb(194, 178, 213, maxColorValue = 255), # 6:     Red: 194, Green: 178, Blue: 213
rgb(192, 157, 203, maxColorValue = 255), # 7:     Red: 192, Green: 157, Blue: 203
rgb(189, 132, 186, maxColorValue = 255), # 8:     Red: 189, Green: 132, Blue: 186
rgb(161, 124, 177, maxColorValue = 255), # 9:     Red: 161, Green: 124, Blue: 177
rgb(163, 124, 162, maxColorValue = 255) # 10:   Red: 163, Green: 124, Blue: 162
)
names(cont_colors) <- 1:10
class(cont_colors)
names(cont_colors) %>% class
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
cont_colors <- c(
rgb(248, 250, 251, maxColorValue = 255), # 1:     Red: 248, Green: 250, Blue: 251
rgb(236, 242, 246, maxColorValue = 255), # 2:     Red: 236, Green: 242, Blue: 246
rgb(220, 230, 239, maxColorValue = 255), # 3:     Red: 220, Green: 230, Blue: 239
rgb(203, 218, 233, maxColorValue = 255), # 4:     Red: 203, Green: 218, Blue: 233
rgb(194, 199, 223, maxColorValue = 255), # 5:     Red: 194, Green: 199, Blue: 223
rgb(194, 178, 213, maxColorValue = 255), # 6:     Red: 194, Green: 178, Blue: 213
rgb(192, 157, 203, maxColorValue = 255), # 7:     Red: 192, Green: 157, Blue: 203
rgb(189, 132, 186, maxColorValue = 255), # 8:     Red: 189, Green: 132, Blue: 186
rgb(161, 124, 177, maxColorValue = 255), # 9:     Red: 161, Green: 124, Blue: 177
rgb(163, 124, 162, maxColorValue = 255) # 10:   Red: 163, Green: 124, Blue: 162
)
names(cont_colors) <- 1:10
#loop through the measures themselves (both rank and raw)
#rank
lapply(unique(dt$item),
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont_man', scale_vals = cont_colors)
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
#loop through the measures themselves (both rank and raw)
#rank
lapply(unique(dt$item),
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont_man', scale_vals = cont_colors)
source("~/ehd_mapsense/_code/_lib/viz_fx.R")
#loop through the measures themselves (both rank and raw)
#rank
lapply(unique(dt$item),
cartographeR,
shapefile=tract_sf,
dt=dt, map_varname = 'rank', map_label= 'Tract Ranking',
lvl=3, #most granular level
map_title = 'Measure Ranking (V2.0)',
subset_var='item', scale_type='cont_man', scale_vals = cont_colors)
ggplot(dt[level==1], aes(rank %>% as.factor, le)) +
geom_violin(aes(col = rank %>% as.factor, fill = rank %>% as.factor), alpha = 0.25)+
labs(x = "Index", y = "Life Expectancy",
title = "Relationship between EHD Rank and Life Expectancy",
subtitle = "Average Life Expectancy Between 2015-2019 (dotted line represents state average of 80.3 years)"
) +
geom_vline(xintercept = 8.5, linetype='dashed', color='dark red') +
geom_hline(yintercept = index_dt[1, le_state_average], linetype='dotted', color='dark blue') +
scale_x_discrete() +
scale_color_manual('Rank', values=cont_colors, na.value = "grey75") +
scale_fill_manual('Rank', values=cont_colors, na.value = "grey75") +
geom_boxplot(color = "gray20", width = 0.15, coef = 1.5) +
annotate("text", x = 9.25, y = 99, label = "Highly Impacted Tracts", vjust = -0.5, color='dark red') +
theme_minimal() +
theme(legend.position = c(1, .99), legend.justification = c(1, 1),
plot.margin = unit(c(0, 0, 0, 0), "in"))
head(index_dt)
#create plot of life expectancy distributions
ggplot(index_dt, aes(rank %>% as.factor, le)) +
geom_violin(aes(col = rank %>% as.factor, fill = rank %>% as.factor), alpha = 0.25)+
labs(x = "Index", y = "Life Expectancy",
title = "Relationship between EHD Rank and Life Expectancy",
subtitle = "Average Life Expectancy Between 2015-2019 (dotted line represents state average of 80.3 years)"
) +
geom_vline(xintercept = 8.5, linetype='dashed', color='dark red') +
geom_hline(yintercept = index_dt[1, le_state_average], linetype='dotted', color='dark blue') +
scale_x_discrete() +
scale_color_manual('Rank', values=cont_colors, na.value = "grey75") +
scale_fill_manual('Rank', values=cont_colors, na.value = "grey75") +
geom_boxplot(color = "gray20", width = 0.15, coef = 1.5) +
annotate("text", x = 9.25, y = 99, label = "Highly Impacted Tracts", vjust = -0.5, color='dark red') +
theme_minimal() +
theme(legend.position = c(1, .99), legend.justification = c(1, 1),
plot.margin = unit(c(0, 0, 0, 0), "in"))
#save the plot
file.path(viz.dir, 'le_violin_minimal.png') %>% ggsave(height=8, width=12)
#create plot of life expectancy distributions
ggplot(index_dt, aes(rank %>% as.factor, le)) +
geom_violin(aes(col = rank %>% as.factor, fill = rank %>% as.factor), alpha = 0.25)+
labs(x = "Index", y = "Life Expectancy",
title = "Relationship between EHD Rank and Life Expectancy",
subtitle = "Average Life Expectancy Between 2015-2019 (dotted line represents state average of 80.3 years)"
) +
geom_vline(xintercept = 8.5, linetype='dashed', color='dark red') +
geom_hline(yintercept = index_dt[1, le_state_average], linetype='dotted', color='dark blue') +
scale_x_discrete() +
scale_color_brewer('Rank', palette='Purples', direction=-1) +
scale_fill_brewer('Rank', palette='Purples', direction=-1) +
geom_boxplot(color = "gray20", width = 0.15, coef = 1.5) +
annotate("text", x = 9.25, y = 99, label = "Highly Impacted Tracts", vjust = -0.5, color='dark red') +
theme_minimal() +
theme(legend.position = c(1, .99), legend.justification = c(1, 1),
plot.margin = unit(c(0, 0, 0, 0), "in"))
#save the plot
file.path(viz.dir, 'le_violin_minimal.png') %>% ggsave(height=8, width=12)
#create plot of life expectancy distributions
ggplot(index_dt, aes(rank %>% as.factor, le)) +
geom_violin(aes(col = rank %>% as.factor, fill = rank %>% as.factor), alpha = 0.25)+
labs(x = "Index", y = "Life Expectancy",
title = "Relationship between EHD Rank and Life Expectancy",
subtitle = "Average Life Expectancy Between 2015-2019 (dotted line represents state average of 80.3 years)"
) +
geom_vline(xintercept = 8.5, linetype='dashed', color='dark red') +
geom_hline(yintercept = index_dt[1, le_state_average], linetype='dotted', color='dark blue') +
scale_x_discrete() +
scale_color_manual('Rank', values=cont_colors, na.value = "grey75") +
scale_fill_manual('Rank', values=cont_colors, na.value = "grey75") +
geom_boxplot(color = "gray20", width = 0.15, coef = 1.5) +
annotate("text", x = 9.25, y = 99, label = "Highly Impacted Tracts", vjust = -0.5, color='dark red') +
theme_minimal() +
theme(legend.position = c(1, .99), legend.justification = c(1, 1),
plot.margin = unit(c(0, 0, 0, 0), "in"))
#save the plot
file.path(viz.dir, 'le_violin_minimal.png') %>% ggsave(height=8, width=12)
#scatter the measure ranks to compare V1:v2
ggplot(dt[level==3], aes(x=measure_v1, measure, color=dropout) ) +
geom_point(position='jitter') +
#geom_hex(bins = 70) +
facet_wrap(~item) +
scale_x_continuous("Measure Ranking, V1.1") +
scale_y_continuous("Measure Ranking, V2.0") +
scale_color_brewer('Highly Impacted: \nDropouts', palette='Pastel1') +
theme_minimal()
#save the plot
file.path(viz.dir, 'measure_shift_scatters.png') %>% ggsave(height=8, width=12)
head(dt[level==3])
dim(dt[level==3])
#scatter the measure ranks to compare V1:v2
ggplot(dt[level==3], aes(x=rank_v1, rank, color=dropout) ) +
geom_point(position='jitter') +
#geom_hex(bins = 70) +
facet_wrap(~item) +
scale_x_continuous("Measure Ranking, V1.1") +
scale_y_continuous("Measure Ranking, V2.0") +
scale_color_brewer('Highly Impacted: \nDropouts', palette='Pastel1') +
theme_minimal()
#save the plot
file.path(viz.dir, 'measure_shift_scatters.png') %>% ggsave(height=8, width=12)
